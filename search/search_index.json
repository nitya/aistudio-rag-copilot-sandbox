{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Motivation","text":"<p>Generative AI applications are redefining user experiences across consumer and enterprise domains. In this project, we learn to build a custom copilot code-first on the Azure AI platform. </p> <ul> <li>A \"copilot\" is a generative AI solution that supports conversational interactions with users - i.e., it uses natural language inputs or prompts. </li> <li>A \"custom\" copilot is one that grounds those responses in your own data, allowing you to enforce quality and safety criteria to deliver responsible AI experiences.</li> <li>A \"code-first\" approach emphasizes the use of developer tools (CLI, IDE) and libraries (SDK) to allow deeper configuration and customization of the copilot tech stack.</li> <li>The \"Azure AI platform\" refers to the Azure AI Studio (UI, SDK and CLI) and supporting ecosystem of Foundation Models (catalog) and AI Services (integrations).</li> </ul>"},{"location":"#set-the-stage-retail-rag","title":"Set the Stage - Retail + RAG","text":"<p>Let's focus on a specific application use case (a retail copilot) and a popular design pattern (retrieval augmented generation or RAG) as the basis for the implementation.</p> <ul> <li>The retail copilot scenario involves an online retail store (Contoso Outdoors) that implements a AI-based customer support agent (Contoso Chat). </li> <li>The agent's responses must be grounded in the retailer's data - specifically its product catalog (index) and customer purchase history (DB).</li> </ul> <p>Building generative AI solutions end-to-end requires a better understanding of the application lifecycle (LLM Ops) and developer tooling to streamline the provisioning, orchestration and deployment of complex flows. To learn this, you have two options:</p> <ul> <li>Build it up - learn to construct it step-by-step, from scratch, using guided tutorials.</li> <li>Break it down - learn by deconstructing a completed solution &amp; figure out how it works.</li> </ul> <p>Both options have value. The first teaches you the recommended approach documented by the platform, tool, or service, provider. The second teaches you the applied approach, using open-source projects to get a practical understanding of real-world decision-making and tradeoffs.</p>"},{"location":"#break-it-down-contoso-chat","title":"Break It Down - Contoso Chat","text":"<p>Want to learn by breaking things down? Explore Contoso Chat, an open-source reference sample for the described retail copilot scenario - showcasing the following tools and features:</p> <ul> <li>Application design with Prompty templates.</li> <li>Application development with Promptflow flex flows.</li> <li>Application evaluation with Azure AI Studio tooling</li> <li>Application provisioning and deployment  with Azure Developer CLI</li> </ul> <p>The sample comes with a README that has a table of contents with step-by-step instructions for exploring the sample from a live deployment, to local development.</p>"},{"location":"#build-it-up-from-scratch","title":"Build It Up - From Scratch","text":"<p>This repository will focus on the second option, building the solution up from scratch step-by-step, using a variety of tools and tutorials. This options also allows us to take detours at each step, exploring alternative approaches to achieve the same result to get a more comprehensive picture of the Azure AI platform and ecosystem.</p> <p>The list below identifies some of the tutorials and documentation sites we will be using:</p> <ul> <li> Quickstart: Create Azure AI Hub &amp; Project from UI - Tutorial</li> <li> Quickstart: Create Azure AI Hub &amp; Project from SDK - Tutorial</li> <li> Build a RAG-based copilot with promptflow SDK - Tutorial: Part 1</li> <li> Evaluate and deploy your copilot with promptflow SDK - Tutorial: Part 2</li> <li> Build a custom chat app using promptflow SDK - Tutorial</li> <li> Copilot application that implements RAG - Azure Samples</li> <li> Contoso Chat Retail Copilot Application - Azure Samples</li> </ul> <p>Collection: TBD</p> <p>Watch this space for a link to a Microsoft Learn collection that captures all the required documentation and resources you will need for self-guided exploration of the workshop and related technologies and tools.</p>"},{"location":"#getting-started-dev-containers","title":"Getting Started - Dev Containers","text":"<p>For convenience, the repository is configured with a <code>.devcontainer/devcontainer.json</code> file - defining all the necessary tools and dependencies required with a configuration as code approach. This means all users of this repository get the exact same prebuilt development environment with no added effort or complexity. Just pick one of these two options:</p> <ul> <li>Cloud Dev Environment - launch with GitHub Codespaces, use anywhere.</li> <li>Local Dev Environment - launch with Docker Desktop running, save on quota.</li> </ul> <p>When you launch the development container, you will get a pre-configured Visual Studio Code editor with all the relevant extensions, CLI tools and SDK libraries installed.</p> <p>Ready? Let's Go!</p>"},{"location":"about/","title":"Getting Started","text":"<p>Workshop Objectives</p> <p>This series of hands-on labs teaches you to build, configure, evaluate, deploy, and use, a custom copilot built code-first with Azure-AI, using the RAG (Retrieval Augmented Generation) design pattern, for a retail store scenario. The instructions follow guidance from the Azure AI Studio documentation and the Contoso Chat application sample.</p> <p>This is a self-serve workshop for completion at your own pace. The instructions will emphasize a happy path to get you quickly to the desired goal of a deployed copilot. However, exercises may offer alternative paths for exploration of new tools, models etc. that are intended to build your comprehension and intuition.</p> <p>This lab may be used in instructor-led sessions at physical events. In that case, some steps (e.g., provisioning of infrastructure) may be completed for you. Refer to the instructor guidance at the event for next steps.</p>"},{"location":"about/#what-youll-need","title":"What You'll Need","text":"<p>You will need a laptop for this lab, along with:</p> <ul> <li>A GitHub account (with GitHub Codespaces access)</li> <li>An Azure account (with Azure OpenAI access)</li> <li>A modern browser (to run GitHUb Codespaces)</li> <li>Familiarity with Visual Studio Code (recommended IDE)</li> <li>Familiarity with Python and Jupyter Notebooks (default SDK)</li> </ul>"},{"location":"about/#what-youll-learn","title":"What You'll Learn","text":"<p>By the end of this workshop you should be able to:</p> <ul> <li>Describe the Azure AI Studio platform and developer tooling</li> <li>Describe the LLMOps workflow and end-to-end application lifecycle</li> <li>Build, evaluate, and deploy, a custom RAG-based copilot code-first</li> <li>Understand how to customize or adapt the solution with your own data.</li> </ul>"},{"location":"about/#how-youll-learn-it","title":"How You'll Learn It","text":"<p>These are the main steps in an end-to-end developer workflow (LLM Ops):</p> <ol> <li>Define It - Describe the prioritized scenarios and data requirements.</li> <li>Provision It - Setup required infrastructure &amp; local dev environment.</li> <li>Develop It - Use best-in-class developer tools to prototype prompts, flow.</li> <li>Evaluate It - Validate prototype for quality &amp; safety, learn key metrics.</li> <li>Deploy it - Deploy AI application for hosted API endpoint, test it out.</li> <li>Deliver it - Explore Monitoring (App Insights), Safety (Content Filters).</li> </ol>"},{"location":"about/#under-the-hood","title":"Under The Hood","text":"<p>Want to learn more about the key tools and concepts used in this workshop? Watch this Microsoft Build 2024 breakout talk for a deep dive into LLMOps and code-first development.</p> <p>BRK110: Abstract</p> <p>Learn how to get from prototype to production with LLMOps and new developer tools for iterative debugging, evaluation, deployment, and monitoring. We\u2019ll test and troubleshoot a copilot app using the code-first prompt flow SDK and frameworks like LangChain, interactively debugging an LLM chat application with VS Code. Then we\u2019ll make sure it meets our thresholds for performance and safety, ship it, and ensure we can collect critical signals in production.</p> <p> </p> <p>Next Steps | Get Started  \ud83d\ude80</p>"},{"location":"0%20%7C%20Staging/01/","title":"1. Provision Resources","text":"<p>Setup an Azure AI Hub and Project for the retail copilot implementation using one of these options:  -  Low-code option - using Azure AI Studio UI  - Code-first option - using Azure AI Studio SDK (Python) or Azure CLI (Terminal)  - ARM-template option - using Azure Dev CLI (Terminal) with Infrastructure-as-code.</p> <p>At the end of this step you should have provisioned an Azure AI Hub, AI Project and AI Services resources - with connections to support client interactions with deployed AI services - for your copilot solution. With option 3, you will also provision support services like CosmosDB.</p>"},{"location":"0%20%7C%20Staging/01/#11-create-an-azure-ai-hub-project-from-ui","title":"1.1 Create an Azure AI Hub &amp; Project from UI","text":""},{"location":"1%20%7C%20Define%20It/01/","title":"Hello, Contoso Chat","text":""},{"location":"2%20%7C%20Provision%20It/01/","title":"1. Provision Azure","text":""},{"location":"2%20%7C%20Provision%20It/02/","title":"2. Setup Dev Env","text":""},{"location":"3%20%7C%20Develop%20It/01/","title":"1. Design Prompts","text":""},{"location":"3%20%7C%20Develop%20It/02/","title":"1. Orchestrate Flows","text":""},{"location":"3%20%7C%20Develop%20It/03/","title":"3. Execute Flows","text":""},{"location":"4%20%7C%20Evaluate%20It/01/","title":"1. Tools &amp; Workflows","text":""},{"location":"4%20%7C%20Evaluate%20It/02/","title":"1. Metrics &amp; Visualization","text":""},{"location":"5%20%7C%20Deploy%20It/01/","title":"1. Azure Developer CLI","text":""},{"location":"5%20%7C%20Deploy%20It/02/","title":"2. CI/CD Automation","text":""},{"location":"6%20%7C%20Deliver%20It/01/","title":"1. Monitoring &amp; Tracing","text":""},{"location":"6%20%7C%20Deliver%20It/02/","title":"2. Content Filters &amp; Safety","text":""},{"location":"7%20%7C%20Appendix/01/","title":"1. Developer Tools","text":""},{"location":"7%20%7C%20Appendix/02/","title":"1. Core Concepts","text":""},{"location":"7%20%7C%20Appendix/03/","title":"3. Azure AI Platform","text":""}]}